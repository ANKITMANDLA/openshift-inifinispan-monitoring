apiVersion: template.openshift.io/v1
kind: Template
metadata:
  name: blackbox-exporter
objects:

 - apiVersion: v1
   kind: Service
   metadata:
     name: ${APP_NAME}
     labels:
       app.kubernetes.io/instance: ${INSTANCE}
       app.kubernetes.io/name: ${NAME}
       app.kubernetes.io/version: ${VERSION}
   spec:
     ports:
       - name: http
         protocol: TCP
         port: ${{PORT}}
         targetPort: http
     type: ClusterIP
     selector:
       app.kubernetes.io/instance:  ${INSTANCE}
       app.kubernetes.io/name: ${NAME}

 - apiVersion: v1
   kind: ConfigMap
   metadata:
    name: ${APP_NAME}
    labels:
      app.kubernetes.io/instance: ${INSTANCE}
      app.kubernetes.io/name: ${NAME}
      app.kubernetes.io/version: ${VERSION}
   data:
     blackbox.yaml: |
      modules:
        http_2xx:
          http:
            follow_redirects: true
            preferred_ip_protocol: ip4
            valid_http_versions:
            - HTTP/1.1
            - HTTP/2.0
          prober: http
          timeout: 5s
        http_dg:
          http:
            basic_auth:
              password: ${DG_PASSWORD}
              username: developer
            fail_if_body_not_matches_regexp:
            - HEALTHY
            fail_if_body_matches_regexp:
            - DEGRADED          
            method: GET
            valid_status_codes:
            - 200
            - 400
            - 503
            - 502
            - 500          
            tls_config:
              insecure_skip_verify: true
          prober: http
          timeout: 5s
        http_dg_2xx:
          http:
            basic_auth:
              password: ${DG_PASSWORD}
              username: developer
            tls_config:
              insecure_skip_verify: true
            follow_redirects: true
            preferred_ip_protocol: ip4
            valid_http_versions:
            - HTTP/1.1
            - HTTP/2.0
          prober: http
          timeout: 5s
        http_204:
          http:
            basic_auth:
              password: ${DG_PASSWORD}
              username: developer       
            method: HEAD
            valid_status_codes:
            - 204
            - 404         
            tls_config:
              insecure_skip_verify: true
          prober: http
          timeout: 5s


 - apiVersion: apps/v1
   kind: Deployment
   metadata:
     name: ${APP_NAME}
     labels:
       app.kubernetes.io/instance: ${INSTANCE}
       app.kubernetes.io/name: ${NAME}
       app.kubernetes.io/version: ${VERSION}
   spec:
     replicas: ${{REPLICAS}}
     selector:
       matchLabels:
         app.kubernetes.io/instance: ${INSTANCE}
         app.kubernetes.io/name: ${NAME}
     template:
       metadata:
         labels:
           app.kubernetes.io/instance: ${INSTANCE}
           app.kubernetes.io/name: ${NAME}
           app.kubernetes.io/version: ${VERSION}
       spec:
         restartPolicy: Always
         serviceAccountName: ${SERVICEACCNAME}
         containers:
           - resources: {}
             readinessProbe:
               httpGet:
                 path: /health
                 port: http
                 scheme: HTTP
               timeoutSeconds: 1
               periodSeconds: 10
               successThreshold: 1
               failureThreshold: 3
             terminationMessagePath: /dev/termination-log
             name: blackbox-exporter
             livenessProbe:
               httpGet:
                 path: /health
                 port: http
                 scheme: HTTP
               timeoutSeconds: 1
               periodSeconds: 10
               successThreshold: 1
               failureThreshold: 3
             securityContext: {}
             ports:
               - name: http
                 containerPort: ${{PORT}}
                 protocol: TCP
             imagePullPolicy: IfNotPresent
             volumeMounts:
               - name: config
                 mountPath: /config
             terminationMessagePolicy: File
             image: ${IMAGE}
             args:
               - '--config.file=/config/blackbox.yaml'
         serviceAccount: ${SERVICEACCNAME}
         volumes:
           - name: config
             configMap:
               name: ${APP_NAME}
               defaultMode: 420
         dnsPolicy: ClusterFirst


parameters:
- name: REPLICAS
  type: integer
  format: int32
- name: SERVICEACCNAME
- name: IMAGE
- name: INSTANCE
- name: NAME
- name: VERSION
- name: PORT
  type: integer
  format: int32
- name: DG_PASSWORD
- name: APP_NAME











